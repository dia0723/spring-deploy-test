name: Deploy

on:
  push:
    branches:
     - main

     env:
     DOCKER_IMAGE: ghcr.io/${{ github.actor }}/spring-backend:latest

     jobs:
     build:
     name: build-app
     runs-on: ubuntu-latest
     steps:
     ## jdk setting
     -uses: actions/checkout@v3
     -name: Set up JDK 17
     -uses: actions/setup-java@v3
     with:
     java-version: '17'
     distribution: 'zulu' # https://github.com/actions/setup-java

     #gradle caching

     -name: Create application.yml for CD Deploy
     run:
     echo "${{ secrets. PRODUCTION_ENV }}" > .env

     -name: Grant execute permission for gradles
     run: chmod +x gradlew

     ## gradle build
     -name: Build with Gradle
     run:
     ls
     ./gradlew clean build -x test

     ## docker build & push to production
     -name: Docker build & pish to prod
     run:
     docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GHCR_TOKEN }}
     docker buildx create --name arm64builder --use
     docker buildx build --platform linux/amd64,linux/arm64 -f Dockerfile -t ghcr.io/${{ github.actor }}/spring-backend:latest --push .
     docker logout

     deploy:
      needs: build
      name: Deploy
      runs-on: [ self-hosted, deploy-spring-test ]
      steps:
      -name: Deploy to Production
      -uses: appleboy/ssh-action@v1
      with:
      host: ${{ secrets.HOST_IP }}
      username: ec2-user
      key: ${{ sercrets.PRIVATE_KEY ]]
      port: 22
      script: |
       cd/home/ex2-user/spring-deploy-test
       docker-compose down

       echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
       docker pull ${{env.DOCkKER_IMAGE }}

       docker image prune -f
       docker logout

       docker-compose up -d
  
      







      
